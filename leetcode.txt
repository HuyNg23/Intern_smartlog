//20. Valid Parentheses
//difficulty: easy
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()){
            if(c == '(') stack.push(')');
            else if (c == '[') stack.push(']');
            else if (c == '{') stack.push('}');
            else if (stack.isEmpty() || stack.pop() != c ) return false;
        }
        return stack.isEmpty();
    }
}
//35. Search Insert Position
//difficulty: easy
class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;

        while(start<=end){
            int mid = start + (end-start)/2;
            if(nums[mid] == target)return mid;
            else if(nums[mid] > target) end = mid - 1;
            else start = mid + 1;
        }
        return start;
    }     
}
//21. Merge Two Sorted Lists
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 != null && list2 != null){
            if(list1.val<list2.val){
                list1.next = mergeTwoLists(list1.next, list2);
                return list1;
            }
            else{
                list2.next = mergeTwoLists(list1, list2.next);
                return list2;
            }
        }
        else if(list1==null) return list2;
        return list1;
    }
}
//1. Two Sum
//difficulty: easy
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for(int i = 0; i<n-1; i++){
            for(int j = i+1; j<n; j++){
                if(nums[i] + nums[j] == target){
                    return new int[] {i, j};
                }
            }
        }
        return new int[]{};
    }

}
//14. Longest Common Prefix
//difficulty: easy
class Solution {
    public String longestCommonPrefix(String[] v) {
        StringBuilder ans = new StringBuilder();
        Arrays.sort(v);
        String first = v[0];
        String last = v[v.length - 1];
        for(int i=0; i<Math.min(first.length(), last.length()); i++){
            if(first.charAt(i) != last.charAt(i)){
                return ans.toString();
            }
            ans.append(first.charAt(i));
        }
        return ans.toString(); 
    }
}
//83. Remove Duplicates from Sorted List
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode curr = head;
        while(curr != null && curr.next != null){
            if(curr.val == curr.next.val) curr.next = curr.next.next;
            else curr = curr.next;
        }
        return head;
    }
}
//136. Single Number
//difficulty: easy
class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;
        for(int i=0; i<nums.length; i++){
            result = result^nums[i];
        }
        return result;
    }    
}
//141. Linked List Cycle
//difficulty: easy
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow_pointer = head ; 
        ListNode fast_pointer = head ;
        while(fast_pointer != null && fast_pointer.next != null){
            slow_pointer = slow_pointer.next;
            fast_pointer = fast_pointer.next.next;
            if(slow_pointer == fast_pointer){
                return true;
            }
        }
        return false;
    }
}
//145. Binary Tree Postorder Traversal
//difficulty: easy
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    
    static List<Integer> result;
    private static void Traverse(TreeNode root){
        if(root == null) return;
        if(root.left != null){
            Traverse(root.left);

        }
        if(root.right != null){
            Traverse(root.right);
        }
        result.add(root.val);
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        result = new ArrayList<>();
        Traverse(root);
        return result;
    }
}
//144. Binary Tree Preorder Traversal
//difficulty: easy
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> Trarvesal(TreeNode root, List<Integer> arr){
        if(root!=null){
            int data = root.val;
            arr.add(data);
            Trarvesal(root.left, arr);
            Trarvesal(root.right, arr);
        }
        return arr;
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> arr = new ArrayList<>();
        
        return Trarvesal(root, arr);
    }
}
//160. Intersection of Two Linked Lists
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ArrayList<ListNode> node1 = new ArrayList<>();
        ArrayList<ListNode> node2 = new ArrayList<>();
        while(headA != null){
            node1.add(headA);
            headA = headA.next; 
        }
        while(headB != null){
            node2.add(headB);
            headB = headB.next;
        }
        for(int i=0; i<Math.min(node1.size(), node2.size()); i++){
            if(node1.size() > node2.size()){    
                if(node1.contains(node2.get(i)))
                    return node2.get(i);
            }
            else{
                
                    if(node2.contains(node1.get(i))){
                        return node1.get(i);
                    }    
                
            }    
        }

        return null;
    }
    
}
//257. Binary Tree Paths
//difficulty: easy
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  
public List<String> binaryTreePaths(TreeNode root) {
    List<String> answer = new ArrayList<String>();
    if (root != null) searchBT(root, "", answer);
    return answer;
}
private void searchBT(TreeNode root, String path, List<String> answer) {
    if (root.left == null && root.right == null) answer.add(path + root.val);
    if (root.left != null) searchBT(root.left, path + root.val + "->", answer);
    if (root.right != null) searchBT(root.right, path + root.val + "->", answer);
}

}
//2. Add Two Numbers
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode listNode = new ListNode(0);
        ListNode currentNode = listNode;
        int number = 0;
        while(l1 != null || l2 !=null || number !=0){
            int sum = 0;
            if(l1 != null){
                sum += l1.val;
                l1 = l1.next;                
            }
            if(l2 != null){
                sum += l2.val;
                l2 = l2.next; 
            }
            sum += number;
            number = sum/10;
            ListNode node = new ListNode(sum%10);
            currentNode.next = node;
            currentNode = node; 
        }

        return listNode.next;
    }
}
//9. Palindrome Number
//difficulty: easy
class Solution {
    public boolean isPalindrome(int x) {
        int temp=0;
        int test=x;
        if(x<0){
            return false;
        }
        else{
            while(test!=0){
                int digit = test%10;
                temp = temp*10 + digit;
                test /= 10;
            }
            return( temp == x);
        }    
    }
}
//66. Plus One
//difficulty: easy
class Solution {
    public int[] plusOne(int[] digits) {
        for(int index = digits.length - 1; index >= 0; index--){
            if(digits[index] < 9){
                digits[index]++;
                return digits;
            }
            digits[index] = 0;
        }
        digits =  new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}
//67. Add Binary
//difficulty: easy
class Solution {
    public int[] plusOne(int[] digits) {
        for(int index = digits.length - 1; index >= 0; index--){
            if(digits[index] < 9){
                digits[index]++;
                return digits;
            }
            digits[index] = 0;
        }
        digits =  new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}
//69. Sqrt(x)
//difficulty: easy
class Solution {
    public int mySqrt(int x) {
        if(x==0 || x==1) return x;
        int start = 1;
        int end = x;
        int mid = -1;

        while(start <= end){
            mid =  start + (end - start) / 2 ;
            
            if((long) mid * mid > (long) x) end = mid - 1 ;
            else if (mid * mid == x) return mid;
            else start = mid + 1;
        }
        return Math.round(end);

    }
}
//70. Climbing Stairs
//difficulty: easy
class Solution {
    public int climbStairs(int n) {
        int a = 0;
        int b = 1;
        int c = 0;
        for(int i = 0; i<n; i++){
            c = a + b;
            a = b;
            b = c;
        }

        return b;
    }
}
//202. Happy Number
//difficulty: easy
class Solution {
    public boolean isHappy(int n) {
        int slow = n;
        int fast = n;
        do{
            slow = square(slow);
            fast = square(square(fast));
        }while(slow!=fast);
        if(slow==1){
            return true;
        }
        return false;
    }
    //function to find square addition of digits
    public int square(int num){
        int ans = 0;
        while(num>0){
            int rem=num%10;
            ans+=rem*rem;
            num/=10;
        }
        return ans;
    }
}
//206. Reverse Linked List
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }    
}
//876. Middle of the Linked List
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        int count = 0;
        ListNode curr = head;
        while(curr != null){
            count++;
            curr = curr.next;
        }
        curr = head;
        for(int i=0; i<count/2; i++){
            curr = curr.next;
        }
        return curr;
    }
}
//1290. Convert Binary Number in a Linked List to Integer
//difficulty: easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int getDecimalValue(ListNode head) {
        ListNode temp = head;
        int num = 0;
        while(temp != null){
            num = (num*2) + temp.val;
            temp = temp.next; 
        }
        return num;
    }
}




